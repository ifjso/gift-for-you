{"version":3,"sources":["components/QuestionForm.js","components/GiftSystem.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","buttons","display","justifyContent","button","marginTop","spacing","QuestionForm","question","answer","onNext","classes","useState","value","setValue","error","setError","textField","useRef","onChange","useCallback","e","target","onClick","toLowerCase","trim","current","focus","onKeyPress","key","Typography","variant","align","Grid","container","item","xs","TextField","required","autoFocus","fullWidth","label","margin","inputRef","helperText","className","Button","color","layout","alignItems","height","width","marginLeft","marginRight","paper","padding","stepper","greetingTexts","wait","ms","a","Promise","resolve","setTimeout","GiftSystem","activeStep","setActiveStep","greetingText","setGreetingText","activeText","setActiveText","fadeText","setFadeText","activeButton","setActiveButton","snackbarOpen","setSnackbarOpen","delivery","setDelivery","questions","length","then","Paper","Grow","in","timeou","Stepper","map","i","Step","StepLabel","timeout","enter","exit","size","emailjs","send","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","message","createMuiTheme","palette","type","primary","main","background","default","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6pCAOMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,QAAS,CACPC,QAAS,OACTC,eAAgB,YAElBC,OAAQ,CACNC,UAAWL,EAAMM,QAAQ,QA6EdC,EAzEM,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,OAClCC,EAAUb,IADqC,EAE3Bc,mBAAS,IAFkB,mBAE9CC,EAF8C,KAEvCC,EAFuC,OAG3BF,oBAAS,GAHkB,mBAG9CG,EAH8C,KAGvCC,EAHuC,KAI/CC,EAAYC,mBAEZC,EAAWC,uBACf,SAAAC,GACEP,EAASO,EAAEC,OAAOT,OACdE,GACFC,GAAS,KAGb,CAACD,IAEGQ,EAAUH,uBAAY,WACtBP,EAAMW,cAAcC,SAAWhB,GACjCK,EAAS,IACTE,GAAS,GACTN,MAEAI,EAAS,IACTE,GAAS,IAGXC,EAAUS,QAAQC,UACjB,CAAClB,EAAQC,EAAQG,IAEde,EAAaR,uBACjB,SAAAC,GACgB,UAAVA,EAAEQ,KACJN,MAGJ,CAACA,IAGH,OACE,oCACE,kBAACO,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,UAC5BxB,GAEH,kBAACyB,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAACC,EAAA,EAAD,CACEC,UAAQ,EACRC,WAAS,EACTC,WAAS,EACTC,MAAM,eACNC,OAAO,SACPC,SAAU1B,EACVJ,MAAOA,EACPE,MAAOA,EACP6B,WAAY7B,EAAQ,yCAAa,GACjCI,SAAUA,EACVS,WAAYA,MAIlB,yBAAKiB,UAAWlC,EAAQV,SACtB,kBAAC6C,EAAA,EAAD,CACED,UAAWlC,EAAQP,OACnB2B,QAAQ,YACRgB,MAAM,UACNxB,QAASA,GAJX,mB,kCC9DFzB,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCgD,OAAQ,CACN9C,QAAS,OACT+C,WAAY,SACZ9C,eAAgB,SAChB+C,OAAQ,QACRC,MAAO,OACPC,WAAYpD,EAAMM,QAAQ,GAC1B+C,YAAarD,EAAMM,QAAQ,IAE7BgD,MAAO,CACLjD,UAAWL,EAAMM,QAAQ,GACzBiD,QAASvD,EAAMM,QAAQ,IAEzBkD,QAAS,CACPD,QAASvD,EAAMM,QAAQ,EAAG,EAAG,IAE/BL,QAAS,CACPC,QAAS,OACTC,eAAgB,UAElBC,OAAQ,CACNsC,OAAQ1C,EAAMM,QAAQ,QAIpBmD,EAAgB,CACpB,8CACA,kEACA,qJAGIC,EAAI,uCAAG,WAAMC,GAAN,SAAAC,EAAA,+EAAY,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASH,OAAvD,2CAAH,sDAoIKK,EAlII,WACjB,IAAMrD,EAAUb,IADO,EAEac,mBAAS,GAFtB,mBAEhBqD,EAFgB,KAEJC,EAFI,OAGiBtD,mBAAS6C,EAAc,IAHxC,mBAGhBU,EAHgB,KAGFC,EAHE,OAIaxD,oBAAS,GAJtB,mBAIhByD,EAJgB,KAIJC,EAJI,OAKS1D,oBAAS,GALlB,mBAKhB2D,EALgB,KAKNC,EALM,OAMiB5D,oBAAS,GAN1B,mBAMhB6D,EANgB,KAMFC,EANE,OAOiB9D,oBAAS,GAP1B,mBAOhB+D,EAPgB,KAOFC,EAPE,OAQShE,oBAAS,GARlB,mBAQhBiE,EARgB,KAQNC,EARM,KAUjBpE,EAASU,uBAAY,kBAAM8C,EAAcD,EAAa,KAAI,CAACA,IAwCjE,OAzBIA,IAAec,EAAUC,QAAWX,IACtCC,GAAc,GAEdZ,EAAK,MACFuB,MAAK,WAEJ,OADAT,GAAY,GACLd,EAAK,SAEbuB,MAAK,WAGJ,OAFAb,EAAgBX,EAAc,IAC9Be,GAAY,GACLd,EAAK,SAEbuB,MAAK,WAEJ,OADAT,GAAY,GACLd,EAAK,SAEbuB,MAAK,WAGJ,OAFAb,EAAgBX,EAAc,IAC9Be,GAAY,GACLd,EAAK,SAEbuB,MAAK,kBAAMP,GAAgB,OAI9B,oCACE,kBAAC,IAAD,MAEA,0BAAM7B,UAAWlC,EAAQqC,QACvB,kBAACkC,EAAA,EAAD,CAAOrC,UAAWlC,EAAQ2C,OACvBuB,EACC,kBAACM,EAAA,EAAD,CAAMC,IAAE,EAACC,OAAQ,KACf,kBAACvD,EAAA,EAAD,CAAYC,QAAQ,MAApB,0KAIAkC,EAAac,EAAUC,OACzB,oCACE,kBAAClD,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,UAA/B,6BAGA,kBAACsD,EAAA,EAAD,CAASzC,UAAWlC,EAAQ6C,QAASS,WAAYA,GAC9Cc,EAAUQ,KAAI,SAAC/E,EAAUgF,GAAX,OACb,kBAACC,EAAA,EAAD,CAAM5D,IAAK2D,GACT,kBAACE,EAAA,EAAD,WAIN,kBAAC,EAAD,CACElF,SAAUuE,EAAUd,GAAYzD,SAChCC,OAAQsE,EAAUd,GAAYxD,OAC9BC,OAAQA,KAIZ,oCACE,kBAACyE,EAAA,EAAD,CAAMC,GAAIb,EAAUoB,QAAS,CAAEC,MAAO,IAAMC,KAAM,MAChD,kBAAC/D,EAAA,EAAD,CAAYC,QAAQ,MAAMoC,IAG3BM,EACC,yBAAK5B,UAAWlC,EAAQV,SACtB,kBAACkF,EAAA,EAAD,CAAMC,GAAIX,EAAckB,QAAS,KAC/B,kBAAC7C,EAAA,EAAD,CACED,UAAWlC,EAAQP,OACnB2B,QAAQ,YACRgB,MAAM,UACN+C,KAAK,QACLvE,QAlFD,WACjBwE,IAAQC,KACN,QACA,oBACA,GACA,8BAEFlB,GAAY,KAsEI,QAUF,kBAACK,EAAA,EAAD,CAAMC,GAAIX,EAAckB,QAAS,KAC/B,kBAAC7C,EAAA,EAAD,CACED,UAAWlC,EAAQP,OACnB2B,QAAQ,YACRgB,MAAM,YACN+C,KAAK,QACLvE,QApFF,WAChBqD,GAAgB,KA8EA,QAYJ,IAKN,kBAACqB,EAAA,EAAD,CACEC,aAAc,CAAEC,SAAU,MAAOC,WAAY,UAC7CC,KAAM1B,EACN2B,iBAAkB,IAClBC,QAAS,kBAAM3B,GAAgB,IAC/B4B,QAAQ,uDCvKdxG,EAAQyG,YAAe,CAC3BC,QAAS,CACPC,KAAM,OACNC,QAAS,CACPC,KAAM,WAERC,WAAY,CACVC,QAAS,cAaAC,EARH,WACV,OACE,kBAAC,IAAD,CAAkBhH,MAAOA,GACvB,kBAAC,EAAD,QCPciH,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,MAAK,SAAA4C,GACjCA,EAAaC,kB","file":"static/js/main.90dbf7c0.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles(theme => ({\n  buttons: {\n    display: 'flex',\n    justifyContent: 'flex-end'\n  },\n  button: {\n    marginTop: theme.spacing(2)\n  }\n}));\n\nconst QuestionForm = ({ question, answer, onNext }) => {\n  const classes = useStyles();\n  const [value, setValue] = useState('');\n  const [error, setError] = useState(false);\n  const textField = useRef();\n\n  const onChange = useCallback(\n    e => {\n      setValue(e.target.value);\n      if (error) {\n        setError(false);\n      }\n    },\n    [error]\n  );\n  const onClick = useCallback(() => {\n    if (value.toLowerCase().trim() === answer) {\n      setValue('');\n      setError(false);\n      onNext();\n    } else {\n      setValue('');\n      setError(true);\n    }\n\n    textField.current.focus();\n  }, [answer, onNext, value]);\n\n  const onKeyPress = useCallback(\n    e => {\n      if (e.key === 'Enter') {\n        onClick();\n      }\n    },\n    [onClick]\n  );\n\n  return (\n    <>\n      <Typography variant=\"h2\" align=\"center\">\n        {question}\n      </Typography>\n      <Grid container>\n        <Grid item xs={12}>\n          <TextField\n            required\n            autoFocus\n            fullWidth\n            label=\"답변\"\n            margin=\"normal\"\n            inputRef={textField}\n            value={value}\n            error={error}\n            helperText={error ? '아닌거 같아요.' : ''}\n            onChange={onChange}\n            onKeyPress={onKeyPress}\n          />\n        </Grid>\n      </Grid>\n      <div className={classes.buttons}>\n        <Button\n          className={classes.button}\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={onClick}\n        >\n          확인\n        </Button>\n      </div>\n    </>\n  );\n};\n\nexport default QuestionForm;\n","import React, { useState, useCallback } from 'react';\nimport CssBaseLine from '@material-ui/core/CssBaseline';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Grow from '@material-ui/core/Grow';\nimport QuestionForm from './QuestionForm';\nimport questions from '../data/questions';\nimport { Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport emailjs from 'emailjs-com';\n\nconst useStyles = makeStyles(theme => ({\n  layout: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '100vh',\n    width: 'auto',\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2)\n  },\n  paper: {\n    marginTop: theme.spacing(2),\n    padding: theme.spacing(2)\n  },\n  stepper: {\n    padding: theme.spacing(3, 0, 5)\n  },\n  buttons: {\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  button: {\n    margin: theme.spacing(2)\n  }\n}));\n\nconst greetingTexts = [\n  '인증되었습니다.',\n  '안녕하세요, ㅁㅇ님 😄',\n  'ㅁㅇ님께 드릴 작은 선물이 있습니다. 받아주시겠습니까?'\n];\n\nconst wait = async ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst GiftSystem = () => {\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = useState(0);\n  const [greetingText, setGreetingText] = useState(greetingTexts[0]);\n  const [activeText, setActiveText] = useState(false);\n  const [fadeText, setFadeText] = useState(true);\n  const [activeButton, setActiveButton] = useState(false);\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n  const [delivery, setDelivery] = useState(false);\n\n  const onNext = useCallback(() => setActiveStep(activeStep + 1), [activeStep]);\n\n  const onYesClick = () => {\n    emailjs.send(\n      'gmail',\n      'template_mI5S1cXF',\n      {},\n      'user_TtZD6CDqaQLRnaDYuChjw'\n    );\n    setDelivery(true);\n  };\n  const onNoClick = () => {\n    setSnackbarOpen(true);\n  };\n\n  if (activeStep === questions.length && !activeText) {\n    setActiveText(true);\n\n    wait(1500)\n      .then(() => {\n        setFadeText(false);\n        return wait(1500);\n      })\n      .then(() => {\n        setGreetingText(greetingTexts[1]);\n        setFadeText(true);\n        return wait(1500);\n      })\n      .then(() => {\n        setFadeText(false);\n        return wait(1500);\n      })\n      .then(() => {\n        setGreetingText(greetingTexts[2]);\n        setFadeText(true);\n        return wait(1500);\n      })\n      .then(() => setActiveButton(true));\n  }\n\n  return (\n    <>\n      <CssBaseLine />\n\n      <main className={classes.layout}>\n        <Paper className={classes.paper}>\n          {delivery ? (\n            <Grow in timeou={1000}>\n              <Typography variant=\"h2\">\n                곧 택배가 도착할 예정입니다. 조금만 기다려 주세요. 🙇‍♂️\n              </Typography>\n            </Grow>\n          ) : activeStep < questions.length ? (\n            <>\n              <Typography variant=\"h5\" align=\"center\">\n                권한 확인\n              </Typography>\n              <Stepper className={classes.stepper} activeStep={activeStep}>\n                {questions.map((question, i) => (\n                  <Step key={i}>\n                    <StepLabel />\n                  </Step>\n                ))}\n              </Stepper>\n              <QuestionForm\n                question={questions[activeStep].question}\n                answer={questions[activeStep].answer}\n                onNext={onNext}\n              />\n            </>\n          ) : (\n            <>\n              <Grow in={fadeText} timeout={{ enter: 1000, exit: 500 }}>\n                <Typography variant=\"h2\">{greetingText}</Typography>\n              </Grow>\n\n              {activeButton ? (\n                <div className={classes.buttons}>\n                  <Grow in={activeButton} timeout={1000}>\n                    <Button\n                      className={classes.button}\n                      variant=\"contained\"\n                      color=\"primary\"\n                      size=\"large\"\n                      onClick={onYesClick}\n                    >\n                      YES\n                    </Button>\n                  </Grow>\n                  <Grow in={activeButton} timeout={1000}>\n                    <Button\n                      className={classes.button}\n                      variant=\"contained\"\n                      color=\"secondary\"\n                      size=\"large\"\n                      onClick={onNoClick}\n                    >\n                      NO\n                    </Button>\n                  </Grow>\n                </div>\n              ) : (\n                ''\n              )}\n            </>\n          )}\n\n          <Snackbar\n            anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n            open={snackbarOpen}\n            autoHideDuration={2000}\n            onClose={() => setSnackbarOpen(false)}\n            message=\"잘못 누르신 거죠!?\"\n          />\n        </Paper>\n      </main>\n    </>\n  );\n};\n\nexport default GiftSystem;\n","import React from 'react';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport GiftSystem from './components/GiftSystem';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: {\n      main: '#90caf9'\n    },\n    background: {\n      default: '#121212'\n    }\n  }\n});\n\nconst App = () => {\n  return (\n    <MuiThemeProvider theme={theme}>\n      <GiftSystem />\n    </MuiThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}